grammar org.uppaal.UppaalXML hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.uppaal.model/model/uppaal.ecore" as uppaal
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//core" as core
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//types" as types
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//queries" as queries
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//visuals" as visuals
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//declarations" as declarations
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//declarations/global" as global
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//declarations/system" as system
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//templates" as templates
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//statements" as statements
import "platform:/resource/org.uppaal.model/model/uppaal.ecore#//expressions" as expressions

//---------------------------------------------------------------------------------------------------------------------------------
// XML STRUCTURE
//---------------------------------------------------------------------------------------------------------------------------------
// Note on hidden terminals:
// Except for in the XML part comments are generally accepted ANYWHERE. That's
// why every rule referenced directly from any part of the XML rules (NTA, Template,
// Location, Edge) needs to be manually complemented with
//   hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT)
// as otherwise the hidden(WS) thingy is inherited.
NTA returns uppaal::NTA hidden(WS):
	(
		'<?xml version="1.0" encoding="utf-8"?>' |
		"<?xml version='1.0' encoding='utf-8'?>"
	)
    DTD // Parse the document type definition. 
	'<nta' '>'

	// Imports are not used by UPPAAL currently (at least in 2004).
	// Source: https://groups.yahoo.com/neo/groups/uppaal/conversations/messages/546
	('<imports' '>' ANY_TOKEN_BUT_XML_CLOSE* '</imports' '>')*

	// Parse the global declarations.
	('<declaration' '>' globalDeclarations=GlobalDeclarations '</declaration' '>')?

	// Parse all the templates.
	('<template' '>' template+=Template '</template' '>')+

	// Instantiation is not used by UPPAAL anymore.
	// TODO Support it either way for old files.
	('<instantiation' '>' ANY_TOKEN_BUT_XML_CLOSE* '</instantiation' '>')?

	// Parse the system declarations.
	'<system' '>' systemDeclarations=SystemDeclarations '</system' '>'

	// Parse the query declarations.
	('<queries' '>' (queries+=UppaalQuery)* '</queries' '>')?

	'</nta' '>'
;
		
Template returns templates::Template hidden(WS):
// The name of the template might have x- and y-coordinates for some reason, they must be skipped.
	'<name' (('x' '=' STRING)? & ('y' '=' STRING)?) '>' name=ID '</name' '>'
	// Template parameters.
	('<parameter' '>'
	(parameter+=ParameterContainer
	(',' parameter+=ParameterContainer)*)?
	'</parameter' '>')?
	// Local declarations.
	('<declaration' '>' declarations=LocalDeclarations '</declaration' '>')?
	// Get all the locations.
	(location+=Location)+
	//Get all branchpoints.
	(branchPoint+=BranchPoint)*
	// Reference the initial location.
	'<init' 'ref' '=' init=[templates::Location|STRING] '/>'
	// Get the transitions.
	(edge+=Edge)*;

Location returns templates::Location hidden(WS):
	'<location'
	// Parse the optional attributes.
	(('id' '=' id=STRING) & (position=Point)? & ('color' '=' colorCode=STRING)?)
	((// Locations without any subelements and stuff are also allowed.
	'/>') | (// Close the tag.
	'>'
	// Get the name of the location.
	('<name'
	// Discard name location as there is no field for this.
	(('x' '=' STRING)? & ('y' '=' STRING)?) '>' name=ID '</name' '>')?
	// Parse the labels.
	(('<label' 'kind' '=' '"comments"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	comment=CommentLabel
	'</label' '>')? &
	('<label' 'kind' '=' '"invariant"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	invariant=Expression
	'</label' '>')? &
	('<label' 'kind' '=' '"exponentialrate"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	exponentialRate=Expression
	'</label' '>')?)
	// Check whether it is an urgent or committed location.
	locationTimeKind=LocationKind?
	'</location' '>'));

enum LocationKind returns templates::LocationKind:
	URGENT='<urgent/>' | COMMITED='<committed/>';

BranchPoint returns templates::BranchPoint hidden(WS):
	'<branchpoint'
	// Parse the optional attributes.
	(('id' '=' id=STRING) & (position=Point)?)
	('/>')
;
Edge returns templates::Edge hidden(WS):
// Again skip the coordinates.
	'<transition' (('x' '=' STRING)? & ('y' '=' STRING)? & ('id' '=' id=STRING)? & ('color' '=' colorCode=STRING)?) & ('controllable' '=' controllable=QUOTED_BOOLEAN)?  '>'
	// Source...
	'<source' 'ref' '=' source=[templates::AbstractLocation|STRING] '/>'
	// Target...
	'<target' 'ref' '=' target=[templates::AbstractLocation|STRING] '/>'
	// Parse the labels.
	(('<label' 'kind' '=' '"comments"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	comment=CommentLabel
	'</label' '>')? &
	('<label' 'kind' '=' '"synchronisation"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	synchronization=SynchronizationLabel
	'</label' '>')? &
	('<label' 'kind' '=' '"guard"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	guard=Expression
	'</label' '>')? &
	('<label' 'kind' '=' '"assignment"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	update+=Expression (',' update+=Expression)*
	'</label' '>')? &
	('<label' 'kind' '=' '"select"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	selection+=Selection (',' selection+=Selection)*
	'</label' '>')? &
	('<label' 'kind' '=' '"probability"'
	(('x' '=' STRING)? & ('y' '=' STRING)? & ('color' '=' STRING)?)
	'>'
	probabilityWeight=Expression
	'</label' '>')?)
	// Get the nails/bendPoints.
	('<nail' bendPoint+=Point '/>')*
	// Close the tag.
	'</transition' '>';

CommentLabel returns ecore::EString hidden(WS):
	ANY_TOKEN_BUT_XML_CLOSE*;

SynchronizationLabel returns templates::Synchronization hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	channelExpression=IdentifierExpression kind=SynchronizationKind;

enum SynchronizationKind returns templates::SynchronizationKind:
	SEND='!' | RECEIVE='?';

Point returns visuals::Point:
	{visuals::Point} (('x' '=' x=QUOTED_INT)? & ('y' '=' y=QUOTED_INT)?);

Selection returns templates::Selection hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	elements+=VariableNameOnly ':'
	typeDefinition=(RangeTypeSpecification | ScalarTypeSpecification | SimpleIdentifierExpression);

//---------------------------------------------------------------------------------------------------------------------------------
// DECLARATIONS & TYPES
//---------------------------------------------------------------------------------------------------------------------------------
GlobalDeclarations returns declarations::GlobalDeclarations hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	{declarations::GlobalDeclarations}
	(declaration+=(TypedDeclaration | TypeDeclaration) |
	// Problem: Channel priority is only allowed once by UPPAAL. So it is only
	// overwritten and the rule allows more input than UPPAAL normally would.
	channelPriority=ChannelPriorityDeclaration)*;

LocalDeclarations returns declarations::LocalDeclarations hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	{declarations::LocalDeclarations}
	(declaration+=(TypedDeclaration | TypeDeclaration))*;

SystemDeclarations returns declarations::SystemDeclarations hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	{declarations::SystemDeclarations}
	(declaration+=(TypedDeclaration | TypeDeclaration | TemplateDeclaration) |
	// Same problem as with the ChannelPriority above.
	system=System | progressMeasure=ProgressMeasure)*;

ProgressMeasure returns system::ProgressMeasure:
	'progress' '{'
	(expression+=Expression ';')+
	'}';

TemplateDeclaration returns system::TemplateDeclaration:
	declaredTemplate=RedefinedTemplate
	'('
	(argument+=Expression (',' argument+=Expression)*)?
	')' ';';

RedefinedTemplate returns templates::RedefinedTemplate:
	name=UPPAAL_IDENTIFIER
	'='
	referredTemplate=[templates::Template|ID];

System returns system::System:
	'system'
	instantiationList+=InstantiationList
	('&lt;' instantiationList+=InstantiationList)*
	';';

InstantiationList returns system::InstantiationList:
	template+=[templates::AbstractTemplate|UPPAAL_IDENTIFIER]
	(',' template+=[templates::AbstractTemplate|UPPAAL_IDENTIFIER])*;

TypedDeclaration returns declarations::TypedDeclaration:
	typeDefinition=TypeExpression
	((elements+=Function) |
	(elements+=Variable (',' elements+=Variable)* ';'));

TypedElement returns declarations::TypedDeclaration:
//	ChannelVariableDeclaration | ClockVariableDeclaration | DataVariableDeclaration
	// (prefix=DataVariablePrefix)?
	typeDefinition=TypeExpression
	elements+=Variable (',' elements+=Variable)*;

VariableNameOnly returns declarations::Variable:
	name=UPPAAL_IDENTIFIER;

Variable returns declarations::Variable:
	name=UPPAAL_IDENTIFIER
	// Problem:
	// TypeIndex can be a reference to a Type
	// [types::Type|TYPE_REFERENCE]
	// while ValueIndex might be a reference to a variable
	// [core::NamedElement|UPPAAL_IDENTIFIER]
	// These two rules collide as TYPE_REFERENCE and UPPAAL_IDENTIFIER
	// might be ID. In that case we want a Type, though, as references
	// to variables are not even allowed here.
	// The syntactic predicate => tells ANTLR to favour the first rule.
	(('[' index+=(Expression | ScalarTypeSpecification) ']')
	)*
	('=' initializer=Initializer)?;

Initializer returns declarations::Initializer:
	ArrayInitializer | ExpressionInitializer;

ExpressionInitializer returns declarations::ExpressionInitializer:
	expression=Expression;

ArrayInitializer returns declarations::ArrayInitializer:
	'{' initializer+=Initializer (',' initializer+=Initializer)* '}';

TypeExpression returns expressions::Expression:
	RangeTypeSpecification | ScalarTypeSpecification | StructTypeSpecification |
	SimpleIdentifierExpression |
	ChannelPrefixExpression | DataPrefixExpression;

ChannelPrefixExpression returns expressions::ChannelPrefixExpression:
	// Explanation on the strange construction using the DataType
	// rules for urgent and broadcast:
	// If 'chan' occurs isolated, a SimpleIdentifierExpression should
	// be parsed. So in order for the parser to decide for this rule,
	// either 'urgent' or 'broadcast' MUST be consumed. This is not
	// possible to do with something like urgent?='urgent' and unordered
	// lists. This is why a rule is introduced for these cases and a
	// custom value converter returns the appropriate bool value.
	((urgent=ChannelPrefixExpression_Urgent
	(broadcast=ChannelPrefixExpression_Broadcast)?) |
	(broadcast=ChannelPrefixExpression_Broadcast
	(urgent=ChannelPrefixExpression_Urgent)?))
	channelType=[types::Type|UPPAAL_TYPE_OR_IDENTIFIER];

ChannelPrefixExpression_Urgent returns ecore::EBoolean:
	'urgent';

ChannelPrefixExpression_Broadcast returns ecore::EBoolean:
	'broadcast';

DataPrefixExpression returns expressions::DataPrefixExpression:
	prefix=DataVariablePrefix
	dataTypeExpression=(RangeTypeSpecification | ScalarTypeSpecification | StructTypeSpecification |
	SimpleIdentifierExpression);

enum DataVariablePrefix returns declarations::DataVariablePrefix:
	CONST='const' | META='meta';

RangeTypeSpecification returns types::RangeTypeSpecification:
	'int' bounds=IntegerBounds;

IntegerBounds returns types::IntegerBounds:
	'[' lowerBound=Expression ',' upperBound=Expression ']';

StructTypeSpecification returns types::StructTypeSpecification:
	'struct' '{' (declaration+=TypedElement ';')+ '}';

ScalarTypeSpecification returns types::ScalarTypeSpecification:
	'scalar' '[' sizeExpression=Expression ']';

TypeDeclaration returns declarations::TypeDeclaration:
	'typedef'
	typeDefinition=TypeExpression
	type+=DeclaredType (',' type+=DeclaredType)* ';';

DeclaredType returns types::DeclaredType:
	{types::DeclaredType}
	name=UPPAAL_IDENTIFIER;

ChannelPriorityDeclaration returns global::ChannelPriorityDeclaration:
	'chan' 'priority'
	groups+=ChannelPriorityGroup
	('&lt;' groups+=ChannelPriorityGroup)*
	';';

ChannelPriorityGroup returns global::ChannelPriorityGroup:
	items+=PriorityItem (',' items+=PriorityItem)*;

PriorityItem returns global::PriorityItem:
	DefaultItem | ChannelItem;

DefaultItem returns global::DefaultItem:
	{global::DefaultItem} 'default';

ChannelItem returns global::ChannelItem:
	channelExpression=IdentifierExpression;

//---------------------------------------------------------------------------------------------------------------------------------
// STATEMENTS
//---------------------------------------------------------------------------------------------------------------------------------
Function returns declarations::Function:
	name=UPPAAL_IDENTIFIER
	'('
	(parameter+=ParameterContainer
	(',' parameter+=ParameterContainer)*)?
	')'
	block=Block;

ParameterContainer returns declarations::ParameterContainer hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	typeDefinition=TypeExpression
	elements+=Parameter;

Parameter returns declarations::Parameter:
	(callType=CallType)?
	name=UPPAAL_IDENTIFIER;

enum CallType returns declarations::CallType:
	CALL_BY_REFERENCE='&amp;';

Statement returns statements::Statement:
	Block |
	EmptyStatement | ExpressionStatement | ForLoop | Iteration |
	WhileLoop | DoWhileLoop | IfStatement | ReturnStatement;

Block returns statements::Block:
	'{'
	{statements::Block}
	declarations=BlockDeclarations
	(statement+=Statement)*
	'}';

BlockDeclarations returns declarations::LocalDeclarations:
	{declarations::LocalDeclarations}
	(// Syntactic predicate is used to give priority to declarations rather
	// than expressions like SimpleIdentifierExpression reachable from
	// Statement in the Block rule.
	=>declaration+=(BlockTypedDeclaration | TypeDeclaration))*;

BlockTypedDeclaration returns declarations::TypedDeclaration:
	typeDefinition=TypeExpression
	elements+=Variable (',' elements+=Variable)*
	';';

EmptyStatement returns statements::EmptyStatement:
	';' {statements::EmptyStatement};

ExpressionStatement returns statements::ExpressionStatement:
	expression=Expression ';';

ForLoop returns statements::ForLoop:
	'for' '('
	initialization=Expression ';'
	condition=Expression ';'
	iteration=Expression
	')'
	statement=Statement;

Iteration returns statements::Iteration:
	'for' '('
	elements+=VariableNameOnly ':'
	typeDefinition=TypeExpression
	')'
	statement=Statement;

WhileLoop returns statements::WhileLoop:
	'while' '(' expression=Expression ')'
	statement=Statement;

DoWhileLoop returns statements::DoWhileLoop:
	'do' statement=Statement 'while'
	'(' expression=Expression ')' ';';

IfStatement returns statements::IfStatement:
	'if' '(' ifExpression=Expression ')'
	thenStatement=Statement
	(=>'else' elseStatement=Statement)?;

ReturnStatement returns statements::ReturnStatement:
	{statements::ReturnStatement}
	'return' (returnExpression=Expression)? ';';

//---------------------------------------------------------------------------------------------------------------------------------
// EXPRESSIONS
//---------------------------------------------------------------------------------------------------------------------------------
Expression returns expressions::Expression hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	QuantificationExpression;

// The following rules are sorted according to the precedence and associativity rules
// of UPPAAL: http://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Expressions.shtml
// For a description of the patterns see http://ag-kastens.uni-paderborn.de/material/plac/folien/Folie303a.html
// For the concrete pattern: http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
// The default is left-recursive and binary if not otherwise noted.
// Quantification.
// (unary, right-recursive despite of the (wrong?) statement on the website)
QuantificationExpression returns expressions::Expression:
	({expressions::QuantificationExpression}
	quantifier=Quantifier '(' elements+=VariableNameOnly ':' typeDefinition=TypeExpression ')'
	expression=QuantificationExpression // LogicalExpression_OrImply // QuantificationExpression
	) | LogicalExpression_OrImply;

enum Quantifier returns expressions::Quantifier:
	UNIVERSAL='forall' | EXISTENTIAL='exists' | SUMMATIVE='sum';

// Logical Expression (only 'or' and 'imply')
LogicalExpression_OrImply returns expressions::Expression:
	LogicalExpression_And ({expressions::LogicalExpression.firstExpr=current}
	operator=LogicalOperator_OrImply
	secondExpr=LogicalExpression_And)*;

enum LogicalOperator_OrImply returns expressions::LogicalOperator:
	OR='or' | IMPLY='imply';

// Logical Expression (only 'and')
LogicalExpression_And returns expressions::Expression:
	NegationExpression ({expressions::LogicalExpression.firstExpr=current}
	operator=LogicalOperator_And
	secondExpr=NegationExpression)*;

enum LogicalOperator_And returns expressions::LogicalOperator:
	AND='and';

// Negation Expression (logical 'not')
// (unary, right-recursive,)
NegationExpression returns expressions::Expression:
	({expressions::NegationExpression}
	'not' negatedExpression=AssignmentExpression) | AssignmentExpression;

// Assignment Expression, includes stuff like <<= noone will ever use.
// (right-recursive)
AssignmentExpression returns expressions::Expression:
	ConditionExpression ({expressions::AssignmentExpression.firstExpr=current}
	operator=AssignmentOperator
	secondExpr=ConditionExpression)?;

enum AssignmentOperator returns expressions::AssignmentOperator:
	EQUAL='=' | EQUAL=':=' | PLUS_EQUAL='+=' | MINUS_EQUAL='-=' | TIMES_EQUAL='*=' |
	DIVIDE_EQUAL='/=' | MODULO_EQUAL='%=' | BIT_OR_EQUAL='|=' |
	BIT_AND_EQUAL='&=' | BIT_XOR_EQUAL='^=' | BIT_LEFT_EQUAL='&lt;&lt;=' |
	BIT_RIGHT_EQUAL='&gt;&gt;=';

// Conidition Expression, so (true) ? then : else
// (right-recursive, ternary)
ConditionExpression returns expressions::Expression:
	LogicalExpression_OrAlternative ({expressions::ConditionExpression.ifExpression=current} '?'
	thenExpression=Expression ':'
	elseExpression=LogicalExpression_OrAlternative)?;

// Logical Expression (only '||', alternative notation for 'or')
LogicalExpression_OrAlternative returns expressions::Expression:
	LogicalExpression_AndAlternative ({expressions::LogicalExpression.firstExpr=current}
	operator=LogicalOperator_OrAlternative
	secondExpr=LogicalExpression_AndAlternative)*;

enum LogicalOperator_OrAlternative returns expressions::LogicalOperator:
	OR='||';

// Logical Expression (only '&&', alternative notation for 'and')
LogicalExpression_AndAlternative returns expressions::Expression:
	BitwiseExpression_Or ({expressions::LogicalExpression.firstExpr=current}
	operator=LogicalOperator_AndAlternative
	secondExpr=BitwiseExpression_Or)*;

enum LogicalOperator_AndAlternative returns expressions::LogicalOperator:
	AND='&amp;&amp;';

// Bitwise Expression (only '|')
BitwiseExpression_Or returns expressions::Expression:
	BitwiseExpression_Xor ({expressions::BitwiseExpression.firstExpr=current}
	operator=BitwiseOperator_Or
	secondExpr=BitwiseExpression_Xor)*;

enum BitwiseOperator_Or returns expressions::BitwiseOperator:
	OR='|';

// Bitwise Expression (only '^')
BitwiseExpression_Xor returns expressions::Expression:
	BitwiseExpression_And ({expressions::BitwiseExpression.firstExpr=current}
	operator=BitwiseOperator_Xor
	secondExpr=BitwiseExpression_And)*;

enum BitwiseOperator_Xor returns expressions::BitwiseOperator:
	XOR='^';

// Bitwise Expression (only '&')
BitwiseExpression_And returns expressions::Expression:
	CompareExpression_EqualUnequal ({expressions::BitwiseExpression.firstExpr=current}
	operator=BitwiseOperator_And
	secondExpr=CompareExpression_EqualUnequal)*;

enum BitwiseOperator_And returns expressions::BitwiseOperator:
	AND='&amp;';

// Compare Expression (only '==' and '!=')
CompareExpression_EqualUnequal returns expressions::Expression:
	CompareExpression_Other ({expressions::CompareExpression.firstExpr=current}
	operator=CompareOperator_EqualUnequal
	secondExpr=CompareExpression_Other)*;

enum CompareOperator_EqualUnequal returns expressions::CompareOperator:
	EQUAL='==' | UNEQUAL='!=';

// Compare Expression (only '<', '<=', '>=', '>')
CompareExpression_Other returns expressions::Expression:
	MinMaxExpression ({expressions::CompareExpression.firstExpr=current}
	operator=CompareOperator_Other
	secondExpr=MinMaxExpression)*;

enum CompareOperator_Other returns expressions::CompareOperator:
	GREATER='&gt;' | GREATER_OR_EQUAL='&gt;=' |
	LESS='&lt;' | LESS_OR_EQUAL='&lt;=';

// MinMax Expression ('<?' and '>?')
MinMaxExpression returns expressions::Expression:
	BitShiftExpression ({expressions::MinMaxExpression.firstExpr=current}
	operator=MinMaxOperator
	secondExpr=BitShiftExpression)*;

enum MinMaxOperator returns expressions::MinMaxOperator:
	MIN='&lt;?' | MAX='&gt;?';

// BitShift Expression ('<<' and '>>')
BitShiftExpression returns expressions::Expression:
	ArithmeticExpression_PlusMinus ({expressions::BitShiftExpression.firstExpr=current}
	operator=BitShiftOperator
	secondExpr=ArithmeticExpression_PlusMinus)*;

enum BitShiftOperator returns expressions::BitShiftOperator:
	LEFT='&lt;&lt;' | RIGHT='&gt;&gt';

// Arithmetic Expression ('+' and '-')
ArithmeticExpression_PlusMinus returns expressions::Expression:
	ArithmeticExpression_Other ({expressions::ArithmeticExpression.firstExpr=current}
	operator=ArithmeticOperator_PlusMinus
	secondExpr=ArithmeticExpression_Other)*;

enum ArithmeticOperator_PlusMinus returns expressions::ArithmeticOperator:
	ADD='+' | SUBTRACT='-';

// Arithmetic Expression ('*', '/' and '%')
ArithmeticExpression_Other returns expressions::Expression:
	NegationExpression_Alternative ({expressions::ArithmeticExpression.firstExpr=current}
	operator=ArithmeticOperator_Other
	secondExpr=NegationExpression_Alternative)*;

enum ArithmeticOperator_Other returns expressions::ArithmeticOperator:
	MULTIPLICATE='*' | DIVIDE='/' | MODULO='%';

// NOTE: From this point on, I just assume that ++ and -- have a higher
// precedence than ! and that the unary - can only be part of a LiteralExpression.
// Negation Expression Alternative (logical not, '!')
// (unary, right-recursive,)
NegationExpression_Alternative returns expressions::Expression:
	({expressions::NegationExpression}
	'!' negatedExpression=IncrementDecrementExpression) | IncrementDecrementExpression;

// Increment/Decrement Expression (++,--, pre and post)
// (unary, right-recursive)
IncrementDecrementExpression returns expressions::Expression:
	PreIncrementDecrementExpression;

PreIncrementDecrementExpression returns expressions::Expression:
	PostIncrementDecrementExpression | ({expressions::PreIncrementDecrementExpression}
	(operator=IncrementDecrementOperator)
	expression=PreIncrementDecrementExpression);

PostIncrementDecrementExpression returns expressions::Expression:
	ScopedIdentifierExpression
	// Note: For expressions like a+++b, two ways to split them up exist:
	// (a++)+b and a+(++b)
	// As UPPAAL uses the former way a syntactic predicate ensures the
	// higher precedence of the post-expression.
	=>({expressions::PostIncrementDecrementExpression.expression=current}
	operator=IncrementDecrementOperator)*;

enum IncrementDecrementOperator returns expressions::IncrementDecrementOperator:
	INCREMENT='++' | DECREMENT='--';

// ScopedIdentifier Expression (identifiers with .)
ScopedIdentifierExpression returns expressions::Expression:
	TerminatingExpressions ({expressions::ScopedIdentifierExpression.scope=current}
	'.'
	identifier=IdentifierExpression)*;

// Terminating Expressions
TerminatingExpressions returns expressions::Expression:
// TODO: make forall (...) foall (...) <EXPR> parsabe ...
	DeadLockExpression | IdentifierExpression | FunctionCallExpression | LiteralExpression | ('(' Expression ')')//	IdentifierExpression | FunctionCallExpression | LiteralExpression | ('(' Expression ')')
;

DeadLockExpression returns expressions::Deadlock:
	{expressions::Deadlock} 'deadlock';

LiteralExpression returns expressions::LiteralExpression:
	text=LiteralExpressionText;

LiteralExpressionText returns ecore::EString:
	'true' | 'false' | ('-'? INT);
	
// Function Calls
FunctionCallExpression returns expressions::FunctionCallExpression:
	function=[declarations::Function|UPPAAL_IDENTIFIER]
	'('
	(argument+=Expression
	(',' argument+=Expression)*)?
	')';

// Identifier Expression (normal identifiers)
IdentifierExpression returns expressions::IdentifierExpression:
	identifier=[core::NamedElement|UPPAAL_TYPE_OR_IDENTIFIER]
	('[' index+=Expression ']')*;

// Only allows simple identifiers without indices.
SimpleIdentifierExpression returns expressions::IdentifierExpression:
	identifier=[core::NamedElement|UPPAAL_TYPE_OR_IDENTIFIER];

//---------------------------------------------------------------------------------------------------------------------------------
// QUERIES
//---------------------------------------------------------------------------------------------------------------------------------
UppaalQuery returns queries::QueryDescription hidden(WS):
	{queries::QueryDescription}
	'<query' '>'
	('<formula' '>'
	formula=AnyQuery? // TODO: make identifiers resolvable
	'</formula' '>' | '<formula' '/>')
//		'<comment>' // see below
	comment=(QUERY_COMMENT | EMPTY_QUERY_COMMENT)
//		'</comment' '>'
	'</query' '>';

// The comments in the query section are not recognized as comment-section during tokenisation
// This means, that a string-token is generated when a ' or " is present.
// If, for example, a text states: A friend's house
// A string is opened, but never closed properly, which leads to an error.
// Ideally, tokens could be generated depending on context as well, but this doesn't seem to be the case
// This is, what forces ID to be a non-terminal rule as well...
terminal QUERY_COMMENT:
	'<comment' '>'->'</comment' '>';
	
terminal EMPTY_QUERY_COMMENT:
	'<comment' '/>'
;

//---------------------------------------------------------------------------------------------------------------------------------
// PROPERTIES / REQUIREMENTS
//---------------------------------------------------------------------------------------------------------------------------------
AnyQuery returns queries::Query hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	// TODO Allow for the deadlock keyword only in these expressions
	SemanticUnaryQueryOrSMCEstimate // E<> E[]  A<> A[] expression
	| SemanticLeadsToQuery
	| SemanticLimitQuery
	| TIGAQuery
	| SimulateQuery
	| ComplexProbabilityQuery
	| LearningQuery;

enum PathQuantififierAll returns queries::PathQuantifier:
	EXISTS='E' | FORALL='A';

enum PathType returns queries::PathType:
	FUTURE='&lt;&gt;' | GLOBAL='[]';

enum LimitType returns queries::LimitType:
	SUPREMUM='sup'
	| INFIMUM='inf';

SemanticUnaryQueryOrSMCEstimate returns queries::Query hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	(EstimateBegin
		( // With this there only needs to be a lookahead of 2 characters to decide between Estimate and QuantifiedTemporalQuery
			{queries::Estimate}
			=>bounds=SMCBounds ']'
			'('
			boundary=Boundary
			expression=Expression
			')'
		)
	)
	|
	({queries::QuantifiedTemporalQuery}
	quantifier=PathQuantififierAll
	pathType=PathType
	expression=Expression);

Estimate returns queries::Query:
	EstimateBegin
	{queries::Estimate}
	bounds=SMCBounds ']'
	'('
	boundary=Boundary
	expression=Expression
	')';

enum Boundary returns queries::Boundary:
	MIN='min:'
	| MAX='max:';

EstimateBegin hidden():
	'E' '[';

SemanticLeadsToQuery returns queries::Query hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	{queries::LeadsToQuery}
	leftExpression=Expression
	'--&gt;'
	rightExpression=Expression;

SemanticLimitQuery returns queries::Query hidden(WS, SINGLE_LINE_COMMENT, MULTI_LINE_COMMENT):
	{queries::LimitQuery}
	limitType=LimitType
	('{' precondition=Expression '}')?
	':' (expressions+=Expression
	(',' expressions+=Expression)*);

TIGAQuery returns queries::Query:
	'control:' (SimpleWinExpression | ComplexWinExpression);

SimpleWinExpressionBegin hidden():
	'A' '&lt;&gt;';

SimpleWinExpression returns queries::Query:
	SimpleWinExpressionBegin
	{queries::UnaryWinQuery}
	winExpression=Expression;

enum TigaOperator returns queries::TigaOperator:
	U='U'
	| W='W';

ComplexWinExpressionBegin hidden():
	'A' '[';

ComplexWinExpression returns queries::Query:
	ComplexWinExpressionBegin
//  This does not work , as left factoring cases throws away the 'current' fragment for any alternative but the first
//	Expression // A Not loose Expression is always required
//	(
//		  ({queries::AControlQuery.leftExpression=current} operator=TigaOperator rightExpression=Expression ']')
//		| ({queries::UnaryNotLooseQuery.notLooseExpression=current} ']')
// 	)
	// The only alternative left is a sub-optimal solution, which lets 1 object represent all 2 unique states
	// see: https://github.com/eclipse/xtext-core/issues/515
	{queries::AControlQuery}
	leftExpression=Expression
	(operator=TigaOperator
	rightExpression=Expression)?
	']';

BoundType returns queries::BoundType:
	{queries::BoundType}
	// This should refer to a clock variable or an integer, XText expects a common supertpe, though...
	(controlVariable=TerminatingExpressions)
	'&lt;='
	upperBound=Expression // validate for arithmetic only
;

SMCBounds returns queries::SmcBounds:
	{queries::SmcBounds}
	bound=BoundType//    (';' optRuns = Expression)?
;

SMCQuery returns queries::Query:
	SimulateQuery
	| ComplexProbabilityQuery//    | Estimate is not here due to a required ambiguity resolution with Unary symbolic queries
;

SimulateQuery returns queries::Query:
	{queries::SimulateQuery}
	'simulate' '[' bounds=SMCBounds ']' '{' (expressions+=Expression) (',' expressions+=Expression)+ '}' (':'
	optExpression=Expression (':' optSatRuns=ArithmeticExpression_PlusMinus)?)?;

ConstantProbability returns queries::ConstantProbability:
	{queries::ConstantProbability}
	value=FLOAT;

// Due to creating non-LL(*) decisions otherwise
enum ProbCompOp returns queries::ProbCompOp:
	LEQ | GEQ;

ProbabilityBegin hidden():
	'Pr' '[';

ComplexProbabilityQuery returns queries::Query:
	(=> ProbabilityBegin
	{queries::Probability}
	bounds=SMCBounds
	']' '('
	( // Probability or Probability Comparison
	pathType=PathType
	expression=Expression
	( // Now it is known to be a comparison
	{queries::ProbabilityComparison.leftProbability=current}
	comparison=ProbCompOp
	rightProbability=(Probability | ConstantProbability))?)
	// Not supported for now, due to https://github.com/eclipse/xtext-core/issues/515
//		|
//		(
//			{queries::ProbUntil.bounds = current}
//			leftExpression = Expression
//			'U'
//			rightExpression = Expression	
//		)
	')');

Probability returns queries::Probability:
	{queries::Probability}
	ProbabilityBegin (bounds=SMCBounds) ']'
	'('
	pathType=PathType
	expression=Expression
	')';

enum ExpQuantifier returns queries::Boundary:
	MIN='min'
	| MAX='max';

LearningQuery returns queries::Query:
	{queries::LearningQuery}
	aimedQuantity=ExpQuantifier
	'('
	quantifiedExpression=Expression
	')'
	'['
	boundType=BoundType
	']'
	( // Features
	'{' (sourceFeatures+=Expression) (',' sourceFeatures+=Expression)* '}'
	'-&gt;'
	'{' (targetFeatures+=Expression) (',' targetFeatures+=Expression)* '}')
	':'
	pathType=PathType
	pathExpression=Expression;

//---------------------------------------------------------------------------------------------------------------------------------
// TOKENS
//---------------------------------------------------------------------------------------------------------------------------------
UPPAAL_TYPE_OR_IDENTIFIER:
	UPPAAL_IDENTIFIER | 'int' | 'bool' | 'void' | 'chan' | 'clock' | 'double';

UPPAAL_IDENTIFIER:
	ID | XML_KEYWORDS;

UPPAAL_KEYWORDS:
	'chan' | 'clock' | 'bool' | 'int' | 'double' | 'commit' | 'const' | 'urgent' | 'broadcast' | 'init' |
	'process' | 'state' | 'guard' | 'sync' | 'assign' | 'system' | 'trans' | 'deadlock' |
	'and' | 'or' | 'not' | 'imply' | 'true' | 'false' | 'for' | 'forall' | 'exists' | 'while' |
	'do' | 'if' | 'else' | 'return' | 'typedef' | 'struct' | 'rate' | 'before_update' |
	'after_update' | 'meta' | 'priority' | 'progress' | 'scalar' | 'select' | 'void' | 'switch' |
	'case' | 'continue' | 'break' | // End of the list from the website.
	'default';

UPPAAL_STRUCTURE_KEYWORDS:
	'[' | ']' | '&lt;' | '&gt;' | ';' | ',' | '{' | '}' | '(' | ')' | '?' | '!' |
	'*' | '%' | '/' | '+' | '-' |
	'&lt;&lt;' | '&gt;&gt;' | '&lt;?' | '&gt;?' | '&lt;=' | '&gt;=' | '==' | '!=' |
	'&' | '&amp;' | '^' | '|' | '&&' | '&amp;&amp;' | '||' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '|=' |
	'&=' | '^=' | '&lt;&lt;=' | '&gt;&gt;=' | ':' | '.';

// Represents a quoted integer value of the form
//   " -? [0-9]+ "
// The actual value is calculated via a value conversion.
QUOTED_INT returns ecore::EInt:
	STRING;
	
// Represents a quoted boolean value of the form
//   "true | false"
// The actual value is calculated via a value conversion.
QUOTED_BOOLEAN returns ecore::EBoolean:
	STRING;


// Matches any token but the XML close token '</'. This is needed for parsing the
// contents of XML tags until the closing tag occurs.
ANY_TOKEN_BUT_XML_CLOSE:
	XML_KEYWORDS | XML_ATTRIBUTE_KEYWORDS | XML_STRUCTURE_KEYWORDS |
	UPPAAL_KEYWORDS | UPPAAL_STRUCTURE_KEYWORDS |
	STRING | ID | WS | ANY_OTHER | INT | SINGLE_LINE_COMMENT | MULTI_LINE_COMMENT;

// Every token used outside of terminals must occur exactly once in one of the following rules!
XML_STRUCTURE_KEYWORDS:
	'<' | '>' | '/>' |
	'<?xml' 'version="1.0"' 'encoding="utf-8"?>' |
	"<?xml" "version='1.0'" "encoding='utf-8\'?>" |
	"<!DOCTYPE" "nta" "PUBLIC" "'-//Uppaal" "Team//DTD" "Flat" "System" "1.1//EN'"
	"'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd>'" |
	'<!DOCTYPE' 'nta' 'PUBLIC' '"-//Uppaal' 'Team//DTD' 'Flat' 'System' '1.1//EN"'
	'"http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd>"'|
	'<!DOCTYPE' 'nta' 'PUBLIC' '"-//Uppaal' 'Team//DTD' 'Flat' 'System' '1.6//EN"'
	'"http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd>"';

XML_CLOSE_KEYWORD:
	'</';

XML_KEYWORDS:
	'imports' | 'nta' | 'template' | 'name' | 'ref' |
	'location' | 'branchpoint' | 'id' | 'color' | 'transition' | 'source' |
	'target' | 'nail' | 'label' | 'kind' | 'declaration' |
	'instantiation' | 'parameter' | 'committed' | 'x' | 'y' |
	'queries' | 'query' | 'formula' | 'comment'// Keywords that collide with UPPAAL_KEYWORDS
// 'init' | 'urgent' | 'system'
;

XML_ATTRIBUTE_KEYWORDS:
	'"synchronisation"' | '"guard"' | '"assignment"' | '"invariant"' |
	'"exponentialrate"'|'"probability"'|'"comments"';

// 'A' and 'E' are used in a different context as well (TemporalOperator),
//     thus this is required to find ID values just using them...
// TERM_ID is the original rule, but 'A' and 'E' alone will not match TERM_ID, but its own token
// Thus we are here...
// For every "keyword"/terminal that should be allowed as ID value as well, it needs to be added here
ID returns ecore::EString:
	'A' | 'E' | 'Pr' | TERM_ID;

//---------------------------------------------------------------------------------------------------------------------------------
// TERMINALS
//---------------------------------------------------------------------------------------------------------------------------------
terminal STRING:
	'"' ('\\' . | !('\\' | '"'))* '"' |
	"'" ('\\' . | !('\\' | "'"))* "'";

terminal TERM_ID:
// This does not recognize just 'A' or just 'E' as proper string
// ('A' is used in nonterminal rules and consumes it apparently?)
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal INT:
	'0' | (('1'..'9') ('0'..'9')*);

terminal FLOAT returns ecore::EFloat:
	('0'+) '.' ('0'..'9')+
	| '1.0';

terminal SINGLE_LINE_COMMENT:
	'//' !('<' | '\r' | '\n')*;

terminal MULTI_LINE_COMMENT:
	'/*'->'*/';

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;

// Accept different versions at the same time for the moment.
// As long as no tag semantics change, this should be fine.
// This, however, assumes that a document of a specific version doesn't ever have any nodes which belong to the newer version.
terminal DTD: "<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System " PUBLIC_VERSION "//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-" SYSTEM_VERSION ".dtd'>";

// Separate versions for public/system identifiers into two distinct terminals to enable proper serialization
terminal PUBLIC_VERSION: PUBLIC_VERSION_MAJOR "." PUBLIC_VERSION_MINOR;
terminal SYSTEM_VERSION: SYSTEM_VERSION_MAJOR "_" SYSTEM_VERSION_MINOR;
	
terminal PUBLIC_VERSION_MAJOR: '1';
terminal PUBLIC_VERSION_MINOR: '1'|'2'|'3'|'4'|'5'|'6'; // Do not use '..' notation to enable the selection of '1' as primary alternative during serialization

terminal SYSTEM_VERSION_MAJOR: '1';
terminal SYSTEM_VERSION_MINOR: '1'|'2'|'3'|'4'|'5'|'6'; // Do not use '..' notation to enable the selection of '1' as primary alternative during serialization
